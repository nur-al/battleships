from random import randint

class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        return f'Dot({self.x}, {self.y})'

class FieldException(Exception):
    pass

class ShootOutwardsException(FieldException):
    def __str__(self):
        return 'You have shot outwards the field'

class TwiceShotException(FieldException):
    def __str__(self):
        return 'You have already shot this Dot'

class WrongShipPosException(FieldException):
    pass

class Ship:
    def __init__(self, pos, decks, direction):
        self.pos = pos  # корма корабля с которой начнет # строиться корабль на кол-во палуб
        self.decks = decks  # кол-во палуб
        self.direction = direction  # направление - горизонт (1), вертик (0)
        self.lives = decks  # кол-во палуб == кол-во попаданий по кораблю

    @property
    def dots(self):
        ship_dots = []
        for i in range(self.decks):
            cur_x = self.pos.x
            cur_y = self.pos.y

            if self.direction == 0:
                cur_x += i

            elif self.direction == 1:
                cur_y += i

            ship_dots.append(Dot(cur_x, cur_y))

        return ship_dots

    def shooten(self, shot):
        return shot in self.dots

class Board:
    def __init__(self, hid=False, size=6):
        self.size = size
        self.hid = hid
        self.count = 0 # количество кораблей на поле
        self.field = [["~"] * size for _ in range(size)]
        self.busy = []
        self.ships = []

    def __str__(self):
        tmp = ""
        tmp += '  | 1 | 2 | 3 | 4 | 5 | 6 |'
        for i, row in enumerate(self.field):
            tmp += f'\n{i + 1} | ' + ' | '.join(row) + ' |'

        if self.hid:
            tmp = tmp.replace('■', '~')
        return tmp

    def dot_out(self, dot):
        return not ((0 <= dot.x < self.size) and (0 <= dot.y < self.size))
    # False если попал в доску

    def contour(self, ship, verb=False):
        near = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        for d in ship.dots:
            for dx, dy in near:
                cur_dot = Dot(d.x + dx, d.y + dy)
                if not (self.dot_out(cur_dot)) and cur_dot not in self.busy:
                    if verb:
                        self.field[cur_dot.x][cur_dot.y] = "."
                    self.busy.append(cur_dot)

    def add_ship(self, ship):
        for d in ship.dots:
            if self.dot_out(d) or d in self.busy:
                raise WrongShipPosException()
        for d in ship.dots:
            self.field[d.x][d.y] = "■"
            self.busy.append(d)
        self.ships.append(ship)
        self.count += 1
        self.contour(ship)

    def shot(self, d):
        if self.dot_out(d):
            raise ShootOutwardsException()
        if d in self.busy:
            raise TwiceShotException()
        self.busy.append(d)
        for ship in self.ships:
            if ship.shooten(d):
                ship.lives -= 1
                self.field[d.x][d.y] = "X"
                if ship.lives == 0:
                    self.count -= 1
                    self.contour(ship, verb=True)
                    print("Корабль уничтожен!")
                    return False
                else:
                    print("Корабль ранен!")
                    return True

        self.field[d.x][d.y] = "."
        print("Мимо!")
        return False

    def begin(self):
        self.busy = []


class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError()

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except FieldException as e:
                print(e)


class AI(Player):
    def ask(self):
        d = Dot(randint(0, 5), randint(0, 5))
        print(f"Ход компьютера: {d.x + 1} {d.y + 1}")
        return d


class User(Player):
    def ask(self):
        while True:
            cords = input("Ваш ход: ").split()
            if len(cords) != 2:
                print(" Введите 2 координаты! ")
                continue
            x, y = cords
            if not (x.isdigit()) or not (y.isdigit()):
                print(" Введите числа! ")
                continue
            x, y = int(x), int(y)
            return Dot(x - 1, y - 1)


class Game:
    def __init__(self, size=6):
        self.size = size
        pl = self.random_board()
        co = self.random_board()
        co.hid = True

        self.ai = AI(co, pl)
        self.us = User(pl, co)


    def try_board(self):
        ships_decks = [3, 2, 2, 1, 1, 1, 1]
        board = Board(size=self.size)
        attempts = 0
        for i in ships_decks:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), i, randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except WrongShipPosException:
                    pass
        board.begin()
        return board

    def random_board(self):
        board = None
        while board is None:
            board = self.try_board()
        return board

    def greet(self):
        print("-------------------")
        print("  Приветсвуем вас  ")
        print("      в игре       ")
        print("    морской бой    ")
        print("-------------------")
        print(" формат ввода: x y ")
        print(" x - номер строки  ")
        print(" y - номер столбца ")

    def print_board(self):
        print("-" * 20)
        print("Доска пользователя:")
        print(self.us.board)
        print("-" * 20)
        print("Доска компьютера:")
        print(self.ai.board)
        print("-" * 20)


    def loop(self):
        num = 0
        while True:
            self.print_board()
            if num % 2 == 0:
                print("Ходит пользователь!")
                repeat = self.us.move()
            else:
                print("Ходит компьютер!")
                repeat = self.ai.move()
            if repeat:
                num -= 1

            if self.ai.board.count == 0:
                self.print_board()
                print("-" * 20)
                print("Пользователь выиграл!")
                break

            if self.us.board.count == 0:
                self.print_board()
                print("-" * 20)
                print("Компьютер выиграл!")
                break
            num += 1

    def start(self):
        self.greet()
        self.loop()
g = Game()
g.start()
